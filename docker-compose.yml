version: '3.8'

services:
  # PostgreSQL Database with PostGIS extension
  postgres:
    image: postgis/postgis:15-3.3
    environment:
      POSTGRES_USER: uzima_user
      POSTGRES_PASSWORD: uzima_password
      POSTGRES_DB: uzima_climate
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - climate-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U uzima_user -d uzima_climate"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - climate-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://uzima_user:uzima_password@postgres:5432/uzima_climate
      - REDIS_URL=redis://redis:6379/0
      - GOOGLE_EARTH_ENGINE_SERVICE_ACCOUNT=${GOOGLE_EARTH_ENGINE_SERVICE_ACCOUNT:-}
      - AFRICAS_TALKING_API_KEY=${AFRICAS_TALKING_API_KEY:-}
      - AFRICAS_TALKING_USERNAME=${AFRICAS_TALKING_USERNAME:-}
      - SECRET_KEY=${SECRET_KEY:-dev_secret_key_change_in_production}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - CORS_ORIGINS=http://localhost:3000,http://frontend:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - climate-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./backend/uploads:/app/uploads

  # Frontend PWA (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - climate-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Background worker for async tasks
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: python -m app.worker
    environment:
      - DATABASE_URL=postgresql://uzima_user:uzima_password@postgres:5432/uzima_climate
      - REDIS_URL=redis://redis:6379/0
      - GOOGLE_EARTH_ENGINE_SERVICE_ACCOUNT=${GOOGLE_EARTH_ENGINE_SERVICE_ACCOUNT:-}
      - AFRICAS_TALKING_API_KEY=${AFRICAS_TALKING_API_KEY:-}
      - AFRICAS_TALKING_USERNAME=${AFRICAS_TALKING_USERNAME:-}
      - SECRET_KEY=${SECRET_KEY:-dev_secret_key_change_in_production}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - climate-network
    restart: unless-stopped
    volumes:
      - ./backend/uploads:/app/uploads

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - climate-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  climate-network:
    driver: bridge
