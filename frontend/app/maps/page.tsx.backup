'use client'

import { useState, useEffect } from 'react'
import Navigation from '@/components/Navigation'
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
  Filler,
} from 'chart.js'
import { Line, Bar, Doughnut, Scatter } from 'react-chartjs-2'

// Register Chart.js components
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
  Filler
)

interface MapLayer {
  id: string
  name: string
  description: string
  icon: string
  active: boolean
  color: string
  unit: string
}

interface ClimateData {
  county: string
  latitude: number
  longitude: number
  temperature: number
  rainfall: number
  humidity: number
  ndvi: number
  soilMoisture: number
  airQuality: number
  windSpeed: number
  pressure: number
  elevation: number
}

interface TimeSeriesData {
  date: string
  temperature: number
  rainfall: number
  humidity: number
  ndvi: number
  soilMoisture: number
  airQuality: number
}

interface RegionalComparison {
  county: string
  temperature: number
  rainfall: number
  ndvi: number
  population: number
  area: number
}

type TimeFrame = '7d' | '30d' | '90d' | '1y' | '5y'
type ViewMode = 'map' | 'trends' | 'comparison' | 'insights'

export default function MapsPage() {
  const [selectedCounty, setSelectedCounty] = useState('Nairobi')
  const [selectedTimeFrame, setSelectedTimeFrame] = useState<TimeFrame>('30d')
  const [viewMode, setViewMode] = useState<ViewMode>('map')
  const [mapLayers, setMapLayers] = useState<MapLayer[]>([
    {
      id: 'rainfall',
      name: 'Rainfall',
      description: 'Current rainfall patterns and intensity',
      icon: 'üåßÔ∏è',
      active: true,
      color: '#3B82F6',
      unit: 'mm'
    },
    {
      id: 'temperature',
      name: 'Temperature',
      description: 'Temperature distribution across regions',
      icon: 'üå°Ô∏è',
      active: false,
      color: '#EF4444',
      unit: '¬∞C'
    },
    {
      id: 'ndvi',
      name: 'Vegetation (NDVI)',
      description: 'Vegetation health and density',
      icon: 'üå±',
      active: false,
      color: '#22C55E',
      unit: 'index'
    },
    {
      id: 'soil-moisture',
      name: 'Soil Moisture',
      description: 'Soil moisture levels',
      icon: 'üíß',
      active: false,
      color: '#06B6D4',
      unit: '%'
    },
    {
      id: 'air-quality',
      name: 'Air Quality',
      description: 'Air quality index and pollution levels',
      icon: 'üå¨Ô∏è',
      active: false,
      color: '#A855F7',
      unit: 'AQI'
    }
  ])

  const [climateData, setClimateData] = useState<ClimateData[]>([])
  const [timeSeriesData, setTimeSeriesData] = useState<TimeSeriesData[]>([])
  const [regionalComparison, setRegionalComparison] = useState<RegionalComparison[]>([])
  const [loading, setLoading] = useState(true)

  // Mock data generation
  const generateClimateData = (): ClimateData[] => {
    const counties = [
      { name: 'Nairobi', lat: -1.2921, lng: 36.8219 },
      { name: 'Mombasa', lat: -4.0435, lng: 39.6682 },
      { name: 'Kisumu', lat: -0.0917, lng: 34.7680 },
      { name: 'Nakuru', lat: -0.3031, lng: 36.0800 },
      { name: 'Eldoret', lat: 0.5143, lng: 35.2697 },
      { name: 'Meru', lat: 0.0469, lng: 37.6556 },
      { name: 'Nyeri', lat: -0.4203, lng: 36.9467 },
      { name: 'Machakos', lat: -1.5177, lng: 37.2634 }
    ]

    return counties.map(county => ({
      county: county.name,
      latitude: county.lat,
      longitude: county.lng,
      temperature: Math.round((20 + Math.random() * 15) * 10) / 10,
      rainfall: Math.round(Math.random() * 100 * 10) / 10,
      humidity: Math.round((50 + Math.random() * 40) * 10) / 10,
      ndvi: Math.round(Math.random() * 100) / 100,
      soilMoisture: Math.round((20 + Math.random() * 60) * 10) / 10,
      airQuality: Math.round(30 + Math.random() * 100),
      windSpeed: Math.round((5 + Math.random() * 15) * 10) / 10,
      pressure: Math.round((1000 + Math.random() * 50) * 10) / 10,
      elevation: Math.round(500 + Math.random() * 2000)
    }))
  }

  const generateTimeSeriesData = (days: number): TimeSeriesData[] => {
    const data: TimeSeriesData[] = []
    const now = new Date()
    
    for (let i = days; i >= 0; i--) {
      const date = new Date(now.getTime() - i * 24 * 60 * 60 * 1000)
      data.push({
        date: date.toISOString().split('T')[0],
        temperature: Math.round((22 + Math.sin(i * 0.1) * 5 + Math.random() * 6) * 10) / 10,
        rainfall: Math.round(Math.random() * 20 * 10) / 10,
        humidity: Math.round((60 + Math.sin(i * 0.15) * 20 + Math.random() * 15) * 10) / 10,
        ndvi: Math.round((0.3 + Math.sin(i * 0.05) * 0.2 + Math.random() * 0.3) * 100) / 100,
        soilMoisture: Math.round((40 + Math.sin(i * 0.12) * 20 + Math.random() * 20) * 10) / 10,
        airQuality: Math.round(50 + Math.random() * 50)
      })
    }
    return data
  }

  const generateRegionalComparison = (): RegionalComparison[] => {
    const counties = ['Nairobi', 'Mombasa', 'Kisumu', 'Nakuru', 'Eldoret', 'Meru', 'Nyeri', 'Machakos']
    return counties.map(county => ({
      county,
      temperature: Math.round((20 + Math.random() * 15) * 10) / 10,
      rainfall: Math.round(Math.random() * 100 * 10) / 10,
      ndvi: Math.round(Math.random() * 100) / 100,
      population: Math.round(50000 + Math.random() * 4000000),
      area: Math.round(1000 + Math.random() * 5000)
    }))
  }

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true)
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      setClimateData(generateClimateData())
      const days = selectedTimeFrame === '7d' ? 7 : selectedTimeFrame === '30d' ? 30 : 
                   selectedTimeFrame === '90d' ? 90 : selectedTimeFrame === '1y' ? 365 : 1825
      setTimeSeriesData(generateTimeSeriesData(days))
      setRegionalComparison(generateRegionalComparison())
      
      setLoading(false)
    }

    fetchData()
  }, [selectedCounty, selectedTimeFrame])

  const toggleLayer = (layerId: string) => {
    setMapLayers(prev => prev.map(layer => 
      layer.id === layerId ? { ...layer, active: !layer.active } : layer
    ))
  }

  const getActiveLayerData = () => {
    const activeLayer = mapLayers.find(layer => layer.active)
    if (!activeLayer) return []
    
    return climateData.map(data => {
      let value = 0
      switch (activeLayer.id) {
        case 'rainfall': value = data.rainfall; break
        case 'temperature': value = data.temperature; break
        case 'ndvi': value = data.ndvi; break
        case 'soil-moisture': value = data.soilMoisture; break
        case 'air-quality': value = data.airQuality; break
      }
      return { ...data, value }
    })
  }

  // Chart configurations
  const getTrendsChartData = () => {
    const labels = timeSeriesData.map(d => {
      const date = new Date(d.date)
      return selectedTimeFrame === '7d' 
        ? date.toLocaleDateString('en-US', { weekday: 'short' })
        : selectedTimeFrame === '30d'
        ? date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })
        : date.toLocaleDateString('en-US', { month: 'short', year: '2-digit' })
    })

    const activeLayer = mapLayers.find(layer => layer.active)
    if (!activeLayer) return { labels: [], datasets: [] }

    let data: number[] = []
    let label = ''
    
    switch (activeLayer.id) {
      case 'rainfall':
        data = timeSeriesData.map(d => d.rainfall)
        label = `Rainfall (${activeLayer.unit})`
        break
      case 'temperature':
        data = timeSeriesData.map(d => d.temperature)
        label = `Temperature (${activeLayer.unit})`
        break
      case 'ndvi':
        data = timeSeriesData.map(d => d.ndvi)
        label = `NDVI (${activeLayer.unit})`
        break
      case 'soil-moisture':
        data = timeSeriesData.map(d => d.soilMoisture)
        label = `Soil Moisture (${activeLayer.unit})`
        break
      case 'air-quality':
        data = timeSeriesData.map(d => d.airQuality)
        label = `Air Quality (${activeLayer.unit})`
        break
    }

    return {
      labels,
      datasets: [{
        label,
        data,
        borderColor: activeLayer.color,
        backgroundColor: `${activeLayer.color}20`,
        fill: true,
        tension: 0.4
      }]
    }
  }

  const getComparisonChartData = () => {
    const activeLayer = mapLayers.find(layer => layer.active)
    if (!activeLayer) return { labels: [], datasets: [] }

    let data: number[] = []
    let label = ''
    
    switch (activeLayer.id) {
      case 'rainfall':
        data = regionalComparison.map(d => d.rainfall)
        label = `Rainfall (${activeLayer.unit})`
        break
      case 'temperature':
        data = regionalComparison.map(d => d.temperature)
        label = `Temperature (${activeLayer.unit})`
        break
      case 'ndvi':
        data = regionalComparison.map(d => d.ndvi)
        label = `NDVI (${activeLayer.unit})`
        break
    }

    return {
      labels: regionalComparison.map(d => d.county),
      datasets: [{
        label,
        data,
        backgroundColor: `${activeLayer.color}80`,
        borderColor: activeLayer.color,
        borderWidth: 2
      }]
    }
  }

  const getCorrelationData = () => {
    return {
      datasets: [{
        label: 'Temperature vs Rainfall',
        data: climateData.map(d => ({ x: d.temperature, y: d.rainfall })),
        backgroundColor: 'rgba(59, 130, 246, 0.6)',
        borderColor: 'rgba(59, 130, 246, 1)',
      }]
    }
  }

  const chartOptions = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top' as const,
      },
      title: {
        display: false,
      },
    },
    scales: {
      y: {
        beginAtZero: false,
        grid: {
          color: 'rgba(0, 0, 0, 0.1)',
        },
      },
      x: {
        grid: {
          color: 'rgba(0, 0, 0, 0.1)',
        },
      },
    },
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Navigation selectedCounty={selectedCounty} onCountyChange={setSelectedCounty} />
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
        </div>
      </div>
    )
  }
    }
  ])

  const toggleLayer = (layerId: string) => {
    setMapLayers(layers => 
      layers.map(layer => 
        layer.id === layerId 
          ? { ...layer, active: !layer.active }
          : layer
      )
    )
  }

  // Mock climate data for the selected county
  const getClimateData = () => {
    return {
      rainfall: {
        current: Math.round(Math.random() * 50 * 10) / 10,
        trend: Math.random() > 0.5 ? 'increasing' : 'decreasing',
        forecast: 'Light to moderate rainfall expected'
      },
      temperature: {
        current: Math.round(20 + Math.random() * 15),
        trend: Math.random() > 0.5 ? 'rising' : 'falling',
        forecast: 'Temperatures will remain stable'
      },
      vegetation: {
        ndvi: Math.round(Math.random() * 100) / 100,
        health: Math.random() > 0.5 ? 'Good' : 'Fair',
        trend: Math.random() > 0.5 ? 'improving' : 'declining'
      }
    }
  }

  const climateData = getClimateData()

  return (
    <div className="min-h-screen bg-gray-50">
      <Navigation selectedCounty={selectedCounty} onCountyChange={setSelectedCounty} />
      
      <main className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-900 mb-2">
            Climate Maps
          </h1>
          <p className="text-xl text-gray-600">
            Interactive climate data visualization for {selectedCounty}
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          {/* Map Layers Panel */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Map Layers</h3>
              
              <div className="space-y-3">
                {mapLayers.map((layer) => (
                  <div key={layer.id} className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <span className="text-xl">{layer.icon}</span>
                      <div>
                        <div className="font-medium text-gray-900">{layer.name}</div>
                        <div className="text-sm text-gray-600">{layer.description}</div>
                      </div>
                    </div>
                    <button
                      onClick={() => toggleLayer(layer.id)}
                      className={`w-12 h-6 rounded-full transition-colors ${
                        layer.active ? 'bg-blue-600' : 'bg-gray-300'
                      }`}
                    >
                      <div
                        className={`w-5 h-5 bg-white rounded-full transition-transform ${
                          layer.active ? 'translate-x-6' : 'translate-x-1'
                        }`}
                      />
                    </button>
                  </div>
                ))}
              </div>
            </div>

            {/* Climate Summary */}
            <div className="bg-white rounded-lg shadow-lg p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Climate Summary</h3>
              
              <div className="space-y-4">
                <div className="border-l-4 border-blue-400 pl-3">
                  <div className="text-sm font-medium text-gray-900">Rainfall</div>
                  <div className="text-lg font-bold text-blue-600">{climateData.rainfall.current}mm</div>
                  <div className="text-xs text-gray-600">{climateData.rainfall.forecast}</div>
                </div>
                
                <div className="border-l-4 border-red-400 pl-3">
                  <div className="text-sm font-medium text-gray-900">Temperature</div>
                  <div className="text-lg font-bold text-red-600">{climateData.temperature.current}¬∞C</div>
                  <div className="text-xs text-gray-600">{climateData.temperature.forecast}</div>
                </div>
                
                <div className="border-l-4 border-green-400 pl-3">
                  <div className="text-sm font-medium text-gray-900">Vegetation Health</div>
                  <div className="text-lg font-bold text-green-600">{climateData.vegetation.health}</div>
                  <div className="text-xs text-gray-600">NDVI: {climateData.vegetation.ndvi}</div>
                </div>
              </div>
            </div>
          </div>

          {/* Main Map Area */}
          <div className="lg:col-span-3">
            <div className="bg-white rounded-lg shadow-lg p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-gray-900">Climate Map</h3>
                <div className="flex space-x-2">
                  <button className="px-3 py-1 text-sm bg-gray-200 text-gray-700 rounded hover:bg-gray-300">
                    Satellite
                  </button>
                  <button className="px-3 py-1 text-sm bg-blue-600 text-white rounded hover:bg-blue-700">
                    Climate
                  </button>
                  <button className="px-3 py-1 text-sm bg-gray-200 text-gray-700 rounded hover:bg-gray-300">
                    Terrain
                  </button>
                </div>
              </div>
              
              {/* Placeholder Map - In real implementation, use a mapping library like Leaflet or Mapbox */}
              <div className="w-full h-96 bg-gradient-to-br from-blue-100 to-green-100 rounded-lg border-2 border-dashed border-gray-300 flex items-center justify-center">
                <div className="text-center">
                  <div className="text-4xl mb-4">üó∫Ô∏è</div>
                  <div className="text-xl font-semibold text-gray-700 mb-2">Interactive Climate Map</div>
                  <div className="text-gray-600 mb-4">
                    Showing {mapLayers.filter(l => l.active).map(l => l.name).join(', ') || 'No layers'} for {selectedCounty}
                  </div>
                  <div className="text-sm text-gray-500">
                    In production, this would display an interactive map with climate data overlays
                  </div>
                </div>
              </div>
              
              {/* Map Legend */}
              <div className="mt-4 flex flex-wrap gap-4">
                {mapLayers.filter(layer => layer.active).map((layer) => (
                  <div key={layer.id} className="flex items-center space-x-2">
                    <span className="text-lg">{layer.icon}</span>
                    <span className="text-sm font-medium">{layer.name}</span>
                    <div className="w-16 h-4 bg-gradient-to-r from-blue-200 to-blue-600 rounded"></div>
                  </div>
                ))}
              </div>
            </div>

            {/* Data Insights */}
            <div className="mt-6 grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="bg-white rounded-lg shadow p-4">
                <div className="flex items-center space-x-2 mb-2">
                  <span className="text-2xl">üìà</span>
                  <span className="font-semibold">Trends</span>
                </div>
                <div className="text-sm text-gray-600">
                  <p>‚Ä¢ Rainfall {climateData.rainfall.trend}</p>
                  <p>‚Ä¢ Temperature {climateData.temperature.trend}</p>
                  <p>‚Ä¢ Vegetation {climateData.vegetation.trend}</p>
                </div>
              </div>
              
              <div className="bg-white rounded-lg shadow p-4">
                <div className="flex items-center space-x-2 mb-2">
                  <span className="text-2xl">‚ö†Ô∏è</span>
                  <span className="font-semibold">Alerts</span>
                </div>
                <div className="text-sm text-gray-600">
                  <p>‚Ä¢ No severe weather warnings</p>
                  <p>‚Ä¢ Normal vegetation levels</p>
                  <p>‚Ä¢ Moderate drought risk</p>
                </div>
              </div>
              
              <div className="bg-white rounded-lg shadow p-4">
                <div className="flex items-center space-x-2 mb-2">
                  <span className="text-2xl">üîÑ</span>
                  <span className="font-semibold">Updates</span>
                </div>
                <div className="text-sm text-gray-600">
                  <p>‚Ä¢ Data updated hourly</p>
                  <p>‚Ä¢ Last update: 2 hours ago</p>
                  <p>‚Ä¢ Next update: 30 minutes</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  )
}
